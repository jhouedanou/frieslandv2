version: '3.8'

services:
  # Base de donnÃ©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: friesland_postgres
    environment:
      POSTGRES_DB: friesland_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - friesland_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Dashboard Laravel (API Backend)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: friesland_dashboard
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_KEY=base64:YOUR_APP_KEY_HERE
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=friesland_dashboard
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SANCTUM_STATEFUL_DOMAINS=localhost,127.0.0.1
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./dashboard:/var/www
      - dashboard_storage:/var/www/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - friesland_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      sh -c "
        composer dump-autoload --optimize &&
        php artisan key:generate --force &&
        php artisan config:cache &&
        php artisan migrate --force &&
        php artisan db:seed --force &&
        /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
      "

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: friesland_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - friesland_network
    command: redis-server --appendonly yes

  # Monitoring avec Adminer pour la BDD
  adminer:
    image: adminer:latest
    container_name: friesland_adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - friesland_network

volumes:
  postgres_data:
    driver: local
  dashboard_storage:
    driver: local
  redis_data:
    driver: local

networks:
  friesland_network:
    driver: bridge