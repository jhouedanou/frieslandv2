version: '3.8'

services:
  # Service Flutter Development
  flutter-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: friesland-flutter-dev
    volumes:
      - .:/app
      - flutter_cache:/opt/flutter/.pub-cache
      - android_sdk_cache:/opt/android-sdk
    ports:
      - "8080:8080"   # Flutter Web
      - "9000:9000"   # Flutter DevTools
      - "5000:5000"   # API Backend local
    environment:
      - FLUTTER_WEB_PORT=8080
      - FLUTTER_WEB_HOSTNAME=0.0.0.0
      - ENABLE_WEB_DEBUGGING=true
    stdin_open: true
    tty: true
    working_dir: /app
    command: ["flutter", "run", "-d", "web-server", "--web-port=8080", "--web-hostname=0.0.0.0"]
    networks:
      - friesland-network

  # Service Firebase Emulator Suite (optionnel - désactivé car on utilise PostgreSQL)
  # firebase-emulator:
  #   image: node:18-alpine
  #   container_name: friesland-firebase-emulator
  #   volumes:
  #     - ./firebase:/app/firebase
  #     - firebase_cache:/root/.cache/firebase
  #   ports:
  #     - "4000:4000"   # Firebase Emulator UI
  #     - "8081:8081"   # Firestore Emulator
  #     - "9099:9099"   # Auth Emulator
  #     - "5001:5001"   # Functions Emulator
  #     - "8085:8085"   # Firebase Hosting
  #   working_dir: /app/firebase
  #   environment:
  #     - FIRESTORE_EMULATOR_HOST=0.0.0.0:8081
  #     - FIREBASE_AUTH_EMULATOR_HOST=0.0.0.0:9099
  #   command: >
  #     sh -c "
  #       npm install -g firebase-tools &&
  #       firebase emulators:start --host 0.0.0.0
  #     "
  #   networks:
  #     - friesland-network

  # Service PostgreSQL pour données locales
  postgres-local:
    image: postgis/postgis:15-3.3
    container_name: friesland-postgres
    environment:
      - POSTGRES_DB=friesland_db
      - POSTGRES_USER=friesland_user
      - POSTGRES_PASSWORD=friesland_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - friesland-network

  # Service Redis pour cache
  redis-cache:
    image: redis:7-alpine
    container_name: friesland-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - friesland-network

  # Service API Backend (Node.js/Express)
  api-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: friesland-api
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres-local
      - DB_PORT=5432
      - DB_NAME=friesland_db
      - DB_USER=friesland_user
      - DB_PASSWORD=friesland_password
      - REDIS_URL=redis://redis-cache:6379
      - PORT=3000
    depends_on:
      - postgres-local
      - redis-cache
    command: npm run dev
    networks:
      - friesland-network

  # Service Nginx pour reverse proxy (optionnel)
  # nginx-proxy:
  #   image: nginx:alpine
  #   container_name: friesland-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - flutter-dev
  #     - api-backend
  #   networks:
  #     - friesland-network

volumes:
  flutter_cache:
    driver: local
  android_sdk_cache:
    driver: local
  firebase_cache:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  friesland-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16